name: Release

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version:
    name: Update Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep "^version" Cargo.toml | cut -d '"' -f 2)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          current=${{ steps.current_version.outputs.current_version }}
          bump_type="${{ github.event.inputs.version_type }}"
          
          IFS='.' read -r major minor patch <<< "$current"
          
          case $bump_type in
            "major")
              new_version="$((major + 1)).0.0"
              ;;
            "minor")
              new_version="${major}.$((minor + 1)).0"
              ;;
            "patch")
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          
          # Update Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$new_version\"/" Cargo.toml

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD)..HEAD --pretty=format:"- %s (%h)" || git log HEAD~10..HEAD --pretty=format:"- %s (%h)")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit and tag version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Cargo.toml
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push
          git push --tags

  build-release:
    needs: version
    name: Build Release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: v${{ needs.version.outputs.new_version }}
      
      - name: Install OpenSSL
        run: |
          brew install openssl@3 pkg-config
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin, aarch64-apple-darwin
          components: clippy
      
      - name: Build for x86_64
        run: cargo build --release --target x86_64-apple-darwin
      
      - name: Build for arm64
        run: cargo build --release --target aarch64-apple-darwin
      
      - name: Create Universal Binary
        run: |
          lipo -create \
            ./target/x86_64-apple-darwin/release/git-rebrand \
            ./target/aarch64-apple-darwin/release/git-rebrand \
            -output git-rebrand-universal

      - name: Create Release
        if: github.actor != 'nektos/act'
        uses: softprops/action-gh-release@v1
        with:
          files: git-rebrand-universal
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          body: ${{ needs.version.outputs.changelog }}
          draft: false
          prerelease: false

  notify:
    needs: [version, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        if: github.actor != 'nektos/act'
        uses: actions/github-script@v6
        with:
          script: |
            const changelog = `${{ needs.version.outputs.changelog }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || 1,
              body: `ðŸŽ‰ Released version v${{ needs.version.outputs.new_version }}\n\nChangelog:\n${changelog}`
            });